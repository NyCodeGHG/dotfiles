set dn42 {
  type ipv6_addr
  auto-merge
  flags interval
  elements = {
    fd00::/8
  }
}

set dn42v4 {
  type ipv4_addr
  auto-merge
  flags interval
  elements = {
    172.20.0.0/14
  }
}

set as4242423085 {
  type ipv6_addr
  auto-merge
  flags interval
  elements = {
    fdf1:3ba4:9723::/48
  }
}

set tailscale {
  type ipv6_addr
  auto-merge
  flags interval
  elements = {
    fd7a:115c:a1e0::/48
  }
}

counter dn42_own_as_external {
  comment "external traffic using own source addresses"
}

counter dn42_invalid {
  comment "invalid traffic from dn42"
}

chain filter {
  type filter hook forward priority 0; policy drop;

  # reject dn42 ipv4, as my network is v6 only.
  ip daddr @dn42v4 reject;

  ct state { established, related } accept;
  icmpv6 type != { nd-redirect, 139 } accept;

  iifname wg1 oifname "dn42n*" accept;
  oifname wg1 iifname "dn42n*" accept;

  iifname "dn42n*" jump dn42;

  iifname wg0 jump vpn;
}

chain dn42 {
  ip6 saddr @tailscale reject;
  ip6 daddr @tailscale reject;
  ip6 saddr @as4242423085 counter name dn42_own_as_external reject with icmpv6 admin-prohibited;
  ip6 saddr @dn42 ip6 daddr @dn42 counter accept;

  counter name dn42_invalid reject with icmpv6 admin-prohibited;
}

set vpn_v4 {
  type ipv4_addr
  flags interval
  elements = { 10.69.0.0/24 }
}

set vpn_v6 {
  type ipv6_addr
  flags interval
  elements = { fdf1:3ba4:9723:1000::/64 }
}

set vpn_trusted {
  type ipv4_addr
  flags interval
  elements = {
    192.168.1.0/24,
    192.168.178.0/24,
  }
}

set vpn_egress_clients_v4 {
  type ipv4_addr
  flags interval
  elements = {
    10.69.0.5/32, # marie-desktop
    10.69.0.9/32, # marie pixel
  }
}
set vpn_egress_clients_v6 {
  type ipv6_addr
  flags interval
  elements = {
    fdf1:3ba4:9723:1000::2/128, # marie-desktop
    fdf1:3ba4:9723:1000::4/128, # marie pixel
  }
}

chain vpn {
  # vpn -> vpn
  ip saddr @vpn_v4 ip daddr @vpn_v4 accept;
  ip6 saddr @vpn_v6 ip6 daddr @vpn_v6 accept;

  # vpn egress clients -> trusted vpn networks
  ip saddr @vpn_egress_clients_v4 ip daddr @vpn_trusted accept;

  # vpn egress clients -> internet
  ip saddr @vpn_egress_clients_v4 oifname ens3 accept;
  ip6 saddr @vpn_egress_clients_v6 oifname ens3 accept;
}

chain vpn_nat {
  type nat hook postrouting priority 0;

  ip saddr @vpn_egress_clients_v4 oifname ens3 masquerade;
  ip6 saddr @vpn_egress_clients_v6 oifname ens3 masquerade;
}
